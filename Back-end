""" Christine Simon - 1840920
"""
import flask
from flask import jsonify 
from flask import request

 
from sql import create_con
from sql import execute_myquery
from sql import execute_read_myquery

 
import creds

app = flask.Flask(__name__)  # This is your application name this is a restAPI file so the name would be RESTAPI
app.config['DEBUG'] = True 

#____________________________TEST CONNECTION (Taken from Homework 2)_______________________________
@app.route('/', methods=['GET'])
def defaultmessage():
    return "<h1> Welcome to a Paradise for Seniors! </h1>"

#LOGIN API- UNSURE IF IT WORKS

@app.route('/login', methods=['POST'])
def login():
    if request.form['username'] == 'mary' and request.form['password'] == 'tree':
        return 'Success'
    else:
        return 'That doesnt exist'

#____________________________________FLOORS INFORMATION_______________________

@app.route('/api/floors/all', methods=['GET'])  #ENDPOINT http://127.0.0.1:5000/api/floors/all
def floor_list():
    myCreds = creds.creds()
    conn = create_con(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase) #THIS WORKS DONT TOUCH IT
    sql = 'SELECT * FROM floors'
    floor = execute_read_myquery(conn, sql)
    conn.close()  # Just remembered to close the connection
    return jsonify(floor)


#GET FLOOR BY ID/LEVEL/NAME
@app.route('/api/floor/<int:id>', methods=['GET']) #ENDPOINT http://127.0.0.1:5000/api/floor/<int:id> HAS YET TO WORK
def find_floor(): 
    if 'id' in request.args:
        id = int(request.args['id'])
    else:
        return 'Error: No ID is provided!'
    myCreds = creds.creds()
    conn = create_con(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql = "SELECT * FROM floor WHERE id=%s" #Can also be WHERE level=%s or WHERE name=%s
    floor = execute_read_myquery(conn, sql, (id,))
    conn.close()  # Closing connection again
    return jsonify(floor)

#DELETE FLOOR BY ID/LEVEL/NAME
@app.route('/api/floor/<int:id>', methods=['DELETE'])
def floor_delete():
    request_data = request.get_json()
    idtodelete = request_data['id']

    myCreds = creds.creds()
    conn = create_con(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)

    # Code taken from professor Suresh's class code
    sql = "DELETE FROM floor WHERE id=%s" % (idtodelete)
    execute_myquery(conn, sql)
    conn.close()
    return "Floor is now unavailable"

#POST FLOOR 
@app.route('/api/floor', methods=['POST'])
def add_floor():
    request_data = request.get_json()
    newlevel = request_data['level']
    newname = request_data['name']

    myCreds = creds.creds()
    conn = create_con(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)

    # Had to fix this SQL query. Using parameters instead of string substitution.
    sql = "INSERT INTO floor(level, name) VALUES (%s, %s)"
    execute_myquery(conn, sql, (newlevel, newname))
    conn.close()  # Connection would not work without being repeated and closed
    return 'New floor has opened!'

#UPDATE FLOOR 
@app.route('/api/floor/<int:id>', methods=['PUT'])
def update_floor():
    if 'id' in request.args: #http://127.0.0.1:5000/api/floor/<int:id>
        id = int(request.args['id']) #User has to input ID
    else:
        return 'ID does not exist!'

    request_data = request.get_json()
    updatename = request_data['name']
    updatelevel = request_data['level']

    myCreds = creds.creds()
    conn = create_con(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)

   #SQL query parameters were fixed
    sql = "UPDATE floor SET name=%s, level=%s"
    execute_myquery(conn, sql, (updatename, updatelevel, id))
    conn.close()  # And once more, close that connection!
    return "Requested floor is now updated!"

#____________________________________ROOM INFORMATION_______________________

@app.route('/api/rooms/all', methods=['GET'])  #ENDPOINT http://127.0.0.1:5000/api/room/all THIS WORKS DONT TOUCH
def room_list():
    myCreds = creds.creds()
    conn = create_con(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql = 'SELECT * FROM rooms'
    rooms = execute_read_myquery(conn, sql)
    conn.close() 
    return jsonify(rooms)

#GET ROOMS BY ID/CAPACITY/NUMBER
@app.route('/api/room/<int:id>', methods=['GET']) #ENDPOINT http://127.0.0.1:5000/api/room/<int:id>
def find_room():
    if 'id' in request.args:
        id = int(request.args['id'])
    else:
        return 'Error: No ID is provided!'
    myCreds = creds.creds()
    conn = create_con(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql = "SELECT * FROM floor WHERE id=%s" #Can also be WHERE capacity=%s or WHERE number=%s
    room = execute_read_myquery(conn, sql, (id,))
    conn.close()  # Closing connection again
    return jsonify(room)


#DELETE ROOM BY ID/CAPACITY/NUMBER
@app.route('/api/room/<int:id>', methods=['DELETE'])
def room_delete():
    request_data = request.get_json()
    idtodelete = request_data['id']

    myCreds = creds.creds()
    conn = create_con(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)

    # Code taken from professor Suresh's class code
    sql = "DELETE FROM room WHERE id=%s"
    execute_myquery(conn, sql, (idtodelete,))
    conn.close()
    return "room is under unaccicable"

#POST ROOM 
@app.route('/api/room', methods=['POST'])
def add_room():
    request_data = request.get_json()
    newcapacity = request_data['capacity']
    newnumber = request_data['number']

    myCreds = creds.creds()
    conn = create_con(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)

    # Had to fix this SQL query. Using parameters instead of string substitution.
    sql = "INSERT INTO room(capacity, number) VALUES (%s, %s)"
    execute_myquery(conn, sql, (newcapacity, newnumber))
    conn.close()  # Connection would not work without being repeated and closed
    return 'New room has been made!'

#UPDATE ROOM 
@app.route('/api/room/<int:id>', methods=['PUT'])
def update_room():
    if 'id' in request.args: #http://127.0.0.1:5000/api/room/<int:id>
        id = int(request.args['id']) #User has to input ID
    else:
        return 'ID does not exist!'

    request_data = request.get_json()
    updatecapacity = request_data['capacity']
    updatenumber = request_data['number']
    updatefloor = request_data['floor_id']

    myCreds = creds.creds()
    conn = create_con(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)

   #SQL query parameters were fixed
    sql = "UPDATE room SET capacity=%s, number=%s, floor_id=%s"
    execute_myquery(conn, sql, (updatecapacity, updatenumber, updatefloor, id))
    conn.close()  # And once more, close that connection!
    return "Requested room is now updated!"


#____________________________________RESIDENTS INFORMATION_______________________

@app.route('/api/residents/all', methods=['GET'])  #ENDPOINT http://127.0.0.1:5000/api/residents/all THIS WORKS BUT ROOM ID IS BEING WEIRD
def senior_list():
    myCreds = creds.creds()
    conn = create_con(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql = 'SELECT * FROM residents'
    residents = execute_read_myquery(conn, sql)
    conn.close()  # Just remembered tSo close the connection
    return jsonify(residents)

#GET RESIDENTS BY ID/FIRSTNAME/LASTNAME/AGE/ROOMID
@app.route('/api/residents/<int:id>', methods=['GET']) #ENDPOINT http://127.0.0.1:5000/api/residents/<int:id>
def find_resident():
    if 'id' in request.args:
        id = int(request.args['id'])
    else:
        return 'Error: No ID is provided!'
    myCreds = creds.creds()
    conn = create_con(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql = "SELECT * FROM residents WHERE id=%s" #Can also be WHERE lastname=%s or WHERE firstname=%s
    resident = execute_read_myquery(conn, sql, (id,))
    conn.close()
    return jsonify(resident)


#DELETE RESIDENTS BY ID/FIRSTNAME/LASTNAME/AGE/ROOMID
@app.route('/api/residents/<int:id>', methods=['DELETE'])
def resident_delete():
    request_data = request.get_json()
    idtodelete = request_data['id']

    myCreds = creds.creds()
    conn = create_con(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)

    # Code taken from professor Suresh's class code
    sql = "DELETE FROM residents WHERE id=%s"
    execute_myquery(conn, sql, (idtodelete,))
    conn.close()
    return "This resident has left the premise"

#POST RESIDENT 

@app.route('/api/resident', methods=['POST'])
def add_resident():
    request_data = request.get_json()
    newfname = request_data['firstname']
    newlname = request_data['lastname']
    newage = request_data['age']

    myCreds = creds.creds()
    conn = create_con(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)

    # Had to fix this SQL query. Using parameters instead of string substitution.
    sql = "INSERT INTO residents(firstname, lastname, age) VALUES (%s, %s, %s)"
    execute_myquery(conn, sql, (newfname, newlname, newage))
    conn.close()  # Connection would not work without being repeated and closed
    return 'New resident has entered!'

#UPDATE RESIDENT 
@app.route('/api/residents/<int:id>', methods=['PUT'])
def update_resident():
    if 'id' in request.args: 
        id = int(request.args['id']) #User has to input ID
    else:
        return 'ID does not exist!'

    request_data = request.get_json()
    updatefname = request_data['firstname']
    updatelname = request_data['lastname']
    updateage = request_data['age']
    updateroomid = request_data['room_id']
    myCreds = creds.creds()
    conn = create_con(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)

   #SQL query parameters were fixed
    sql = "UPDATE resident SET firstname=%s, lastname=%s, age=%s, room_id=%s"
    execute_myquery(conn, sql, (updatefname, updatelname, updateage, updateroomid,id))
    conn.close() 
    return "Requested resident is now updated!"

app.run(debug=True, use_reloader = False) #ALWAYS RUN BEFORE ANYTHING